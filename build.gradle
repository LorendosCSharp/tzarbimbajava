apply plugin: 'java'

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Anuken/MindustryMaven/master/repository" }
    maven { url 'https://www.jitpack.io' }
    maven { url "https://repo.mc-skyplex.net/releases" }
}

java {
    targetCompatibility = JavaVersion.VERSION_1_8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext {
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    isWindows = System.getProperty("os.name").toLowerCase().contains("windows")
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies {
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"
    compileOnly("com.github.Redstonneur1256.Mindustry-ModLib:Mod:1.6")
    testImplementation 'junit:junit:4.13.1'
    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.github.Anuken.Arc') {
            details.useVersion "$mindustryVersion"
        }
    }
}

// Check if running in GitHub Actions
def isGithubActions = System.getenv('GITHUB_ACTIONS') != null

task jarAndroid(type: Jar) {
    dependsOn jar

    doLast {
        if (!sdkRoot || !new File(sdkRoot).exists()) {
            throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")
        }

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find { f ->
            new File(f, "android.jar").exists()
        }

        if (!platformRoot) {
            throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")
        }

        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")])
                .collect { "--classpath $it.path" }
                .join(" ")

        def d8 = isWindows ? "d8.bat" : "d8"

        "$d8 $dependencies --min-api 14 --output ${project.archivesBaseName}.jar ${project.archivesBaseName}.jar"
                .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar {
    archiveFileName = "${base.archivesBaseName}.jar"

    doFirst {
        if (!isGithubActions) {
            delete "C:/Users/eladr/AppData/Roaming/Mindustry/mods/tzarbimbajava.jar"
        }
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir) {
        include "mod.hjson"
    }

    from("assets/") {
        include "**"
    }

    doLast {
        if (!isGithubActions) {
            copy {
                from "$buildDir/libs/${project.archivesBaseName}.jar"
                into "C:/Users/eladr/AppData/Roaming/Mindustry/mods/"
            }
        }
    }
}

task deploy(type: Copy) {
    dependsOn jarAndroid, jar

    from zipTree("$buildDir/libs/${project.archivesBaseName}.jar")
    into "$buildDir/libs/deploy"

    doLast {
        delete "$buildDir/libs/${project.archivesBaseName}.jar"
        delete "$buildDir/libs/${project.archivesBaseName}.jar"
    }
}
